import streamlit as st
import sqlite3


# Initialize and setup database
def init_db():
    conn = sqlite3.connect('feedback.db')
    c = conn.cursor()

    # Create a table for feedback
    c.execute('''CREATE TABLE IF NOT EXISTS feedback (feedback_text TEXT)''')

    # Create a table for likes and dislikes
    c.execute(
        '''CREATE TABLE IF NOT EXISTS comic_ratings (comic_id INTEGER PRIMARY KEY, likes INTEGER, dislikes INTEGER)''')
    conn.close()


def save_feedback(feedback_text):
    conn = sqlite3.connect('feedback.db')
    c = conn.cursor()
    c.execute("INSERT INTO feedback (feedback_text) VALUES (?)", (feedback_text,))
    conn.commit()
    conn.close()


def get_ratings(comic_id):
    conn = sqlite3.connect('feedback.db')
    c = conn.cursor()
    c.execute("SELECT likes, dislikes FROM comic_ratings WHERE comic_id=?", (comic_id,))
    data = c.fetchone()
    conn.close()
    if data:
        return data
    return 0, 0


def update_ratings(comic_id, like_or_dislike):
    conn = sqlite3.connect('feedback.db')
    c = conn.cursor()
    likes, dislikes = get_ratings(comic_id)
    if like_or_dislike == "like":
        likes += 1
    else:
        dislikes += 1
    c.execute("REPLACE INTO comic_ratings (comic_id, likes, dislikes) VALUES (?, ?, ?)", (comic_id, likes, dislikes))
    conn.commit()
    conn.close()


init_db()


def get_user_state():
    """Get the current user's session state or initialize it if it doesn't exist."""
    if 'user_state' not in st.session_state:
        st.session_state.user_state = {}
    return st.session_state.user_state


# Sidebar content
st.sidebar.title("AutoComics")
st.sidebar.markdown("This story is fully generated by a Generative AI. Every day a new board is added to the story. I "
                    "hope you enjoy it!")

# Feedback form in the sidebar
st.sidebar.subheader("Feedback Form")
feedback_text = st.sidebar.text_area("Please provide your feedback here:")
if st.sidebar.button("Submit Feedback"):
    save_feedback(feedback_text)
    st.sidebar.success("Thank you for your feedback!")

# Main content
st.title("Monochrome Midlife")

user_state = get_user_state()

# Scrolling comic images with like/dislike buttons
with st.container():
    for i in range(10):
        likes, dislikes = get_ratings(i + 1)
        st.image("dummy_image.jpg", caption=f"Comic Page {i + 1}", use_column_width=True)

        col1, col2, col3 = st.columns([1, 1, 1])

        liked = user_state.get(f"liked_{i}", False)
        disliked = user_state.get(f"disliked_{i}", False)

        with col1:
            if not disliked:  # Only show like button if user hasn't disliked
                if st.button(f"üëç {likes}", key=f"like_{i}"):
                    if not liked:  # Only update if user hasn't liked yet
                        update_ratings(i + 1, "like")
                        user_state[f"liked_{i}"] = True

        with col2:
            if not liked:  # Only show dislike button if user hasn't liked
                if st.button(f"üëé {dislikes}", key=f"dislike_{i}"):
                    if not disliked:  # Only update if user hasn't disliked yet
                        update_ratings(i + 1, "dislike")
                        user_state[f"disliked_{i}"] = True
